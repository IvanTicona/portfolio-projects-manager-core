const request = require('supertest');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const app = require('../index');
const Project = require('../models/Project');
const User = require('../models/User');
const { JWT } = require('../config');

describe('Project routes', () => {
  let token;

  beforeAll(async () => {
    const pass = await bcrypt.hash('pw', 1);
    const user = await User.create({ name: 'U', email: 'u@u.com', password: pass });
    token = jwt.sign({ userId: user._id }, JWT.SECRET);
  });

  it('GET /api/projects', async () => {
    const res = await request(app).get('/api/projects');
    expect(res.status).toBe(200);
    expect(res.body).toEqual([]);
  });

  it('POST /api/projects', async () => {
    const res = await request(app)
      .post('/api/projects')
      .set('Authorization', `Bearer ${token}`)
      .send({ title: 'A', description: 'B', url: 'u', technologies: ['X'] });
    expect(res.status).toBe(201);
    expect(res.body.title).toBe('A');
  });

  it('GET /api/projects/:id', async () => {
    const proj = await Project.create({ title: 'T', technologies: [] });
    const res = await request(app)
      .get(`/api/projects/${proj._id}`)
      .set('Authorization', `Bearer ${token}`);
    expect(res.status).toBe(200);
    expect(res.body._id).toBe(proj._id.toString());
  });

  it('PUT /api/projects/:id', async () => {
    const proj = await Project.create({ title: 'Old', technologies: [] });
    const res = await request(app)
      .put(`/api/projects/${proj._id}`)
      .set('Authorization', `Bearer ${token}`)
      .send({ title: 'New' });
    expect(res.status).toBe(200);
    expect(res.body.title).toBe('New');
  });

  it('DELETE /api/projects/:id', async () => {
    const proj = await Project.create({ title: 'ToDel', technologies: [] });
    const res = await request(app)
      .delete(`/api/projects/${proj._id}`)
      .set('Authorization', `Bearer ${token}`);
    expect(res.status).toBe(200);
    expect(res.body.msg).toMatch(/eliminado/i);
  });
});